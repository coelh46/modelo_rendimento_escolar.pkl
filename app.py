import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Previs√£o de Rendimento Escolar",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carrega o modelo treinado
try:
    modelo = joblib.load("modelo_rendimento_escolar.pkl")
except FileNotFoundError:
    st.error("Erro: Modelo n√£o encontrado. Verifique o arquivo 'modelo_rendimento_escolar.pkl'.")
    st.stop()

# Estiliza√ß√£o CSS personalizada
st.markdown("""
    <style>
    .main {background-color: #f9f9fb;}
    .stButton>button {background-color: #4CAF50; color: white; border-radius: 8px;}
    .stSelectbox {background-color: #ffffff; border-radius: 5px;}
    .title {font-size: 2.5em; color: #333;}
    .sidebar .sidebar-content {background-color: #e6f3ff;}
    </style>
    """, unsafe_allow_html=True)

# Sidebar com informa√ß√µes e configura√ß√µes
with st.sidebar:
    st.header("‚ÑπÔ∏è Sobre o Aplicativo")
    st.markdown("""
    Este aplicativo utiliza um modelo de **machine learning** para prever a nota m√©dia de estudantes com base em caracter√≠sticas pessoais e contextuais.
    - **Modelo**: Regress√£o treinada com dados educacionais.
    - **Dados**: Incluem g√™nero, etnia, n√≠vel educacional dos pais, tipo de almo√ßo e curso preparat√≥rio.
    """)
    st.markdown("[Saiba mais sobre o projeto](#)", unsafe_allow_html=True)

# T√≠tulo e introdu√ß√£o
st.markdown('<div class="title">üìö Previs√£o de Rendimento Escolar</div>', unsafe_allow_html=True)
st.markdown("""
Bem-vindo! Este aplicativo prev√™ a **nota m√©dia** de um estudante com base em informa√ß√µes sobre seu estilo de vida e contexto familiar.  
Preencha os campos abaixo e clique em "Prever" para ver o resultado.
""")

# Explica√ß√£o do modelo (expans√≠vel)
with st.expander("üîç Como funciona o modelo?"):
    st.markdown("""
    O modelo foi treinado com um conjunto de dados educacionais que inclui:
    - **G√™nero**: Identifica√ß√£o de g√™nero do estudante.
    - **Grupo √©tnico**: Categoria √©tnica auto-declarada.
    - **N√≠vel de educa√ß√£o dos pais**: Maior n√≠vel educacional alcan√ßado pelos pais.
    - **Tipo de almo√ßo**: Indica se o estudante recebe almo√ßo gratuito/reduzido ou padr√£o.
    - **Curso de prepara√ß√£o**: Participa√ß√£o em curso preparat√≥rio para testes.
    
    O modelo utiliza essas vari√°veis para prever a **nota m√©dia** em uma escala de 0 a 300.
    """)

# Formul√°rio de entrada de dados
st.subheader("üìù Insira os Dados")
with st.form(key="input_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        genero = st.selectbox(
            "G√™nero",
            ["female", "male"],
            help="Selecione o g√™nero do estudante."
        )
        etnia = st.selectbox(
            "Grupo √©tnico",
            ["group A", "group B", "group C", "group D", "group E"],
            help="Selecione o grupo √©tnico."
        )
        nivel_pais = st.selectbox(
            "N√≠vel de educa√ß√£o dos pais",
            ["some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree"],
            help="Maior n√≠vel educacional dos pais."
        )
    
    with col2:
        almoco = st.selectbox(
            "Tipo de almo√ßo",
            ["standard", "free/reduced"],
            help="Indica se o almo√ßo √© padr√£o ou gratuito/reduzido."
        )
        preparacao = st.selectbox(
            "Curso de prepara√ß√£o para o teste",
            ["none", "completed"],
            help="Indica se o estudante fez curso preparat√≥rio."
        )
    
    submit_button = st.form_submit_button("üîÆ Prever Nota M√©dia")

# Processamento da previs√£o
if submit_button:
    # Monta o DataFrame de entrada
    entrada = pd.DataFrame({
        "gender": [genero],
        "race/ethnicity": [etnia],
        "parental level of education": [nivel_pais],
        "lunch": [almoco],
        "test preparation course": [preparacao]
    })

    # Codifica√ß√£o como no treinamento
    entrada_codificada = pd.get_dummies(entrada)
    colunas_modelo = modelo.feature_names_in_
    for col in colunas_modelo:
        if col not in entrada_codificada.columns:
            entrada_codificada[col] = 0
    entrada_codificada = entrada_codificada[colunas_modelo]

    # Previs√£o
    previsao = modelo.predict(entrada_codificada)[0]
    
    # Exibi√ß√£o do resultado
    st.success(f"üéâ **Nota m√©dia prevista**: {previsao:.2f} (em uma escala de 0 a 300)")
    
    # Dados fornecidos
    st.markdown("### üìã Dados Fornecidos")
    st.dataframe(entrada.style.set_properties(**{'background-color': '#e6f3ff', 'border-radius': '5px'}))

    # Gr√°fico de compara√ß√£o
    st.markdown("### üìä Visualiza√ß√£o do Resultado")
    fig, ax = plt.subplots(figsize=(8, 5))
    sns.set_style("whitegrid")
    cores = sns.color_palette("Blues")
    
    # Supondo uma nota m√©dia de refer√™ncia (exemplo: 200)
    media_referencia = 200
    barras = ax.bar(["Nota Prevista", "M√©dia de Refer√™ncia"], [previsao, media_referencia], color=[cores[2], cores[0]])
    ax.set_ylim(0, 350)
    ax.set_ylabel("Pontua√ß√£o", fontsize=12)
    ax.set_title("Compara√ß√£o da Previs√£o", fontsize=14)
    
    # Adiciona valores nas barras
    for barra in barras:
        height = barra.get_height()
        ax.text(barra.get_x() + barra.get_width() / 2, height + 10, f"{height:.2f}", ha='center', fontsize=10)
    
    plt.tight_layout()
    st.pyplot(fig)

# Rodap√©
st.markdown("---")
st.markdown("""
**Desenvolvido por Vicente**  
Projeto de aprendizado de m√°quina para previs√£o de rendimento escolar.  
üìß Contato: vicente@example.com | üåê [GitHub](#)  
""", unsafe_allow_html=True)